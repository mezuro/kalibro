package org.kalibro.core.concurrent;

/**
 * A report which indicates that a {@link Task} has finished. This report is generated by a task when it finishes
 * (normally or throwing an exception). The report is passed to every {@link TaskListener} object that registered to
 * receive such reports using the {@code Task.addListener} method.
 * 
 * @author Carlos Morais
 */
public class TaskReport<T> {

	private Task<T> task;
	private long executionTime;

	private T result;
	private Throwable error;

	protected TaskReport(Task<T> task, long start, T result) {
		this(task, start);
		this.result = result;
	}

	protected TaskReport(Task<T> task, long start, Throwable error) {
		this(task, start);
		this.error = error;
	}

	private TaskReport(Task<T> task, long start) {
		this.task = task;
		executionTime = System.currentTimeMillis() - start;
	}

	public Task<T> getTask() {
		return task;
	}

	public long getExecutionTime() {
		return executionTime;
	}

	public boolean isTaskDone() {
		return error == null;
	}

	public T getResult() {
		return result;
	}

	public Throwable getError() {
		return error;
	}
}